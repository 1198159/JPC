<?xml version="1.0"?>
<?xml-stylesheet href="x86optable.xsl" type="text/xsl"?>
<opcodesnippets>
  <jcc>        {
            cpu.eip += jmp+blockLength;
            return Branch.T1;
        }
        else
        {
            cpu.eip += blockLength;
            return Branch.T2;
        }</jcc>

  <opcode mnemonic="add">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="16">Ev;Ib</args>
  </opcode>

  <opcode mnemonic="and">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
  </opcode>

  <opcode mnemonic="call">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        if ((cpu.r_sp.get16() &lt; 2) &amp;&amp; (cpu.r_sp.get16() > 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        cpu.push16((short)cpu.eip);
        System.out.printf("Saving return address of %08x at esp %08x\n", cpu.eip, cpu.r_esp.get32());
        cpu.eip += jmp;
        cpu.eip &amp;= 0xffff;</snippet>
    <args size="32">Jz</args>
  </opcode>

  <opcode mnemonic="cld">
    <return>Branch.None</return>
    <snippet>        cpu.df = false;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cli">
    <return>Branch.None</return>
    <snippet>        cpu.eflagsInterruptEnable = cpu.eflagsInterruptEnableSoon = false;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cmp">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="16">Ev;Ib</args>
  </opcode>

  <opcode mnemonic="in">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.ioports.ioPortReadByte($op2.get));</snippet>
    <args size="8">AL;Ib</args>
  </opcode>

  <opcode mnemonic="je">
    <return></return>
    <snippet>        if (Processor.getZeroFlag(cpu.flagStatus, cpu.zf, cpu.flagResult))
</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>
  <opcode mnemonic="jne">
    <return></return>
    <snippet>        if (!Processor.getZeroFlag(cpu.flagStatus, cpu.zf, cpu.flagResult))
</snippet>
<jcc/>
    <args size="8">Jb</args>
    <args size="32">Jz</args>
  </opcode>

  <opcode mnemonic="jmp">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.jumpFar(cs, targetEip);</snippet>
    <args size="0">Ap</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += jmp+blockLength;</snippet>
    <args size="32">Jz</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += jmp+blockLength;</snippet>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="lea">
    <return>Branch.None</return>
    <snippet>        $op1.set$op2.get);</snippet>
    <args size="16">Gv;M</args>
  </opcode>

    <opcode mnemonic="loop">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if (cpu.r_cx.get16() == 0)
</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>


  <opcode mnemonic="mov">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="8">Ob;AL</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="8">ALr8b;Ib</args>
    <args size="16">Ev;S</args>
    <args size="16">S;Ev</args>
    <args size="16">Ev;Gv</args>
    <args size="16">Ev;Iz</args>
    <args size="16">Gv;Ev</args>
    <args size="16">Ov;rAX</args>
    <args size="16">rAXr8;Iv</args>
    <args size="16">rCXr9;Iv</args>
    <args size="16">rDXr10;Iv</args>
    <args size="16">rBXr11;Iv</args>
    <args size="16">rDIr15;Iv</args>
  </opcode>

  <opcode mnemonic="out">
    <return>Branch.None</return>
    <snippet>        cpu.ioports.ioPortWriteByte(0xFF&amp;$op1.get, $op2.get);</snippet>
    <args size="8">Ib;AL</args>
  </opcode>

  <opcode mnemonic="pop">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.pop16());</snippet>
    <args size="16">rBXr11</args>
    <args size="16">rBPr13</args>
    <args size="16">DS</args>
  </opcode>

  <opcode mnemonic="push">
    <return>Branch.None</return>
    <snippet>        cpu.push$size($cast$op1.get);</snippet>
    <args size="16">Ev</args>
    <args size="16">rAXr8</args>
    <args size="16">rBXr11</args>
    <args size="16">rBPr13</args>
    <args size="16">DS</args>
  </opcode>

  <opcode mnemonic="rep_stosd">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_stosd_a16(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_stosw">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_stosw_a16(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="ret">
    <return>Branch.Ret</return>
    <snippet>        System.out.printf("Reading return address from %08x\n", cpu.r_esp.get32());
        cpu.eip = 0xFFFF&amp;cpu.pop16();
        System.out.printf("Return to %08x\n", cpu.eip);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="test">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">Eb;Gb</args>
  </opcode>

  <opcode mnemonic="xor">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get ^ $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="16">Ev;Gv</args>
  </opcode>
</opcodesnippets>