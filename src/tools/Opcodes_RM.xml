<?xml version="1.0"?>
<?xml-stylesheet href="x86optable.xsl" type="text/xsl"?>
<opcodesnippets>
  <opcode mnemonic="aaa">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aaa(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="aad">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aad(cpu, $op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="aam">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aam(cpu, $op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="aas">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aas(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="bound_o16">
    <return>Branch.None</return>
    <snippet>        int addr = $op2.get;
        short lower = (short)cpu.physicalMemory.getWord(addr);
	short upper = (short)cpu.physicalMemory.getWord(addr+2);
	short index = (short)$op1.get;
	if ((index &lt; lower) || (index > (upper + 2)))
	    throw ProcessorException.BOUND_RANGE;</snippet>
    <args size="16">Gw;M</args>
  </opcode>

  <opcode mnemonic="bsf">
    <return>Branch.None</return>
    <snippet>        if ($op2.get == 0) {
	    cpu.zf(true);
	} else {
	    cpu.zf(false);
	    $op1.setStaticOpcodes.numberOfTrailingZeros($op2.get));
	}</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>

  <opcode mnemonic="bsr">
    <return>Branch.None</return>
    <snippet>        if ($op2.get == 0) {
	    cpu.zf(true);
	} else {
	    cpu.zf(false);
	    $op1.set31-StaticOpcodes.numberOfLeadingZeros($op2.get));
	}</snippet>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="bsr">
    <return>Branch.None</return>
    <snippet>        if ($op2.get == 0) {
	    cpu.zf(true);
	} else {
	    cpu.zf(false);
	    $op1.set31-StaticOpcodes.numberOfLeadingZeros($mask$op2.get));
	}</snippet>
    <args size="16">Gw;Ew</args>
  </opcode>

  <opcode mnemonic="btc" mem="false">
    <return>Branch.None</return>
    <snippet>        int bit = 1 &lt;&lt; ($op2.get &amp; ($size-1));
        cpu.cf = (0 != ($op1.get &amp; bit));
        cpu.flagStatus &amp;= NCF;
        $op1.set$cast($op1.get^bit));</snippet>
    <args size="16">Ew;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Gd</args>
  </opcode>
  <opcode mnemonic="btc" mem="true">
    <return>Branch.None</return>
    <snippet>        int bit = 1 &lt;&lt; ($op2.get &amp; ($size-1));
        int offset = (($op2.get &amp; ~($size-1))/8);
        cpu.cf = (0 != ($op1.getA offset) &amp; bit));
        cpu.flagStatus &amp;= NCF;
        $op1.setA offset, $cast($op1.getA offset)^bit));</snippet>
    <args size="16">Ew;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="btr" mem="false">
    <return>Branch.None</return>
    <snippet>        int bit = 1 &lt;&lt; ($op2.get &amp; ($size-1));
        cpu.cf = (0 != ($op1.get &amp; bit));
        cpu.flagStatus &amp;= NCF;
        $op1.set$cast($op1.get &amp; ~bit));</snippet>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>
  <opcode mnemonic="btr" mem="true">
    <return>Branch.None</return>
    <snippet>        int bit = 1 &lt;&lt; ($op2.get &amp; ($size-1));
        int offset = (($op2.get &amp; ~($size-1))/8);
        cpu.cf = (0 != ($op1.getA offset) &amp; bit));
        cpu.flagStatus &amp;= NCF;
        $op1.setA offset, $cast($op1.getA offset) &amp; ~bit));</snippet>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="bts" mem="false">
    <return>Branch.None</return>
    <snippet>        int bit = 1 &lt;&lt; ($op2.get &amp; ($size-1));
        cpu.cf = (0 != ($op1.get &amp; bit));
        cpu.flagStatus &amp;= NCF;
        $op1.set$cast($op1.get | bit));</snippet>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>
  <opcode mnemonic="bts" mem="true">
    <return>Branch.None</return>
    <snippet>        int bit = 1 &lt;&lt; ($op2.get &amp; ($size-1));
        int offset = (($op2.get &amp; ~($size-1))/8);
        cpu.cf = (0 != ($op1.getA offset) &amp; bit));
        cpu.flagStatus &amp;= NCF;
        $op1.setA offset, $cast($op1.getA offset) | bit));</snippet>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="cli">
    <return>Branch.None</return>
    <snippet>        cpu.eflagsInterruptEnable = cpu.eflagsInterruptEnableSoon = false;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="clts">
    <return>Branch.None</return>
    <snippet>        cpu.setCR0(cpu.getCR0() &amp; ~0x8);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cmc">
    <return>Branch.None</return>
    <snippet>        cpu.cf = cpu.cf() ^ true;
        cpu.flagStatus &amp;= NCF;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cmovb">
    <return>Branch.None</return>
    <snippet>        if (cpu.cf())
            $op1.set$cast$op2.get);</snippet>
    <args size="16">Gw;Ew</args>
  </opcode>
  <opcode mnemonic="cmovne">
    <return>Branch.None</return>
    <snippet>        if (!cpu.zf())
            $op1.set$cast$op2.get);</snippet>
    <args size="16">Gw;Ew</args>
  </opcode>

  <opcode mnemonic="cbw">
    <return>Branch.None</return>
    <snippet>            cpu.r_ax.set16((byte)cpu.r_al.get8());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cdq">
    <return>Branch.None</return>
    <snippet>        if (cpu.r_eax.get32() &lt; 0)
            cpu.r_edx.set32(-1);
        else
            cpu.r_edx.set32(0);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cwd">
    <return>Branch.None</return>
    <snippet>        if ((short)cpu.r_ax.get16() &lt; 0)
            cpu.r_dx.set16((short)-1);
        else
            cpu.r_dx.set16((short)0);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cwde">
    <return>Branch.None</return>
    <snippet>            cpu.r_eax.set32((short)cpu.r_ax.get16());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cpuid">
    <return>Branch.None</return>
    <snippet>        cpu.cpuid();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="daa">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.daa(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="das">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.das(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="enter_o16">
    <return>Branch.None</return>
    <snippet>            int frameSize = $op1.get;
        int nestingLevel = $op2.get;
        nestingLevel %= 32;

        int frameTemp;
        if (cpu.ss.getDefaultSizeFlag())
        {
            cpu.push32(cpu.r_ebp.get32());
            frameTemp = cpu.r_esp.get32();
        }
        else
        {
            cpu.push16((short)cpu.r_bp.get16());
            frameTemp = cpu.r_esp.get16();
        }

	if (nestingLevel != 0) {
	    while (--nestingLevel != 0) {
                if (cpu.ss.getDefaultSizeFlag())
                    cpu.push16(cpu.ss.getWord(cpu.r_ebp.get32()));
                else
                    cpu.push16(cpu.ss.getWord(cpu.r_ebp.get16() &amp; 0xffff));
		//tempEBP = (tempEBP &amp; ~0xffff) | ((tempEBP - 2) &amp; 0xffff);
		//tempESP = (tempESP &amp; ~0xffff) | ((tempESP - 2) &amp; 0xffff);
		//cpu.ss.setWord(tempESP &amp; 0xffff, cpu.ss.getWord(tempEBP &amp; 0xffff));
	    }
	    cpu.push16((short)frameTemp);
	}
	
	if (cpu.ss.getDefaultSizeFlag())
        {
            cpu.r_ebp.set32(frameTemp);
            cpu.r_esp.set32(cpu.r_esp.get32()-frameSize);
        }
        else
        {
            cpu.r_bp.set16((short)frameTemp);
            cpu.r_sp.set16((short)(cpu.r_sp.get16()-frameSize));
        }</snippet>
    <args size="16">Iw;Ib</args>
  </opcode>

  <opcode mnemonic="hlt">
    <return>Branch.Jmp_Unknown</return>
    <snippet>            cpu.eip += blockLength;
            cpu.waitForInterrupt();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="idiv">
    <return>Branch.None</return>
    <snippet>        if ($op1.get == 0)
            throw ProcessorException.DIVIDE_ERROR;
        short ldiv = (short)cpu.r_ax.get16();
        cpu.r_al.set$size($cast(ldiv/$cast$op1.get));
        cpu.r_ah.set$size($cast(ldiv % $cast$op1.get));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="idiv">
    <return>Branch.None</return>
    <snippet>        if ($op1.get == 0)
            throw ProcessorException.DIVIDE_ERROR;
        long ldiv = (((long)($maskcpu.r_edx.get$size())) &lt;&lt; $size ) | ($maskcpu.r_eax.get$size());
        cpu.r_eax.set$size($cast(int)(ldiv/$cast$op1.get));
        cpu.r_edx.set$size($cast(int)(ldiv % $cast$op1.get));</snippet>
    <args size="16">Ew</args>
  </opcode>
  <opcode mnemonic="idiv">
    <return>Branch.None</return>
    <snippet>        if ($op1.get == 0)
            throw ProcessorException.DIVIDE_ERROR;
        long ldiv = (((0xffffffffL &amp; cpu.r_edx.get$size())) &lt;&lt; $size ) | (0xffffffffL &amp; cpu.r_eax.get$size());
        cpu.r_eax.set$size($cast(int)(ldiv/$cast$op1.get));
        cpu.r_edx.set$size($cast(int)(ldiv % $cast$op1.get));</snippet>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="in">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.ioports.ioPortRead8($mask2$op2.get));</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">AL;DX</args>
  </opcode>
  <opcode mnemonic="in_o16">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.ioports.ioPortRead16($mask2$op2.get));</snippet>
    <args size="16">eAX;DX</args>
    <args size="16">eAX;Ib</args>
  </opcode>
  <opcode mnemonic="in_o32">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.ioports.ioPortRead32($mask2$op2.get));</snippet>
    <args size="32">eAX;DX</args>
  </opcode>

  <opcode mnemonic="insb_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.insb_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="insw_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.insw_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insw_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_insw_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insd_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_insd_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="int">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.int_o16_a16($mask$op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="int1">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.int_o16_a16(1);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="int3">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.int_o16_a16(3);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="iretw">
    <return>Branch.Ret</return>
    <snippet>        cpu.iret_o16_a16();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="lds_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op2.get + op2.getBase(cpu);
        cpu.ds(0xFFFF &amp; cpu.physicalMemory.getWord(addr+2));
        $op1.setcpu.physicalMemory.getWord(addr));</snippet>
    <args size="16">Gw;M</args>
  </opcode>
  <opcode mnemonic="lds_o32">
      <return>Branch.None</return>
      <snippet>        int addr = $op2.get + op2.getBase(cpu);
        cpu.ds(0xFFFF &amp; cpu.physicalMemory.getWord(addr+4));
        $op1.setcpu.physicalMemory.getDoubleWord(addr));</snippet>
    <args size="32">Gd;M</args>
  </opcode>

  <opcode mnemonic="les_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op2.get + op2.getBase(cpu);
        cpu.es(0xFFFF &amp; cpu.physicalMemory.getWord(addr+2));
        $op1.setcpu.physicalMemory.getWord(addr));</snippet>
    <args size="16">Gw;M</args>
  </opcode>

  <opcode mnemonic="lfs_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op2.get + op2.getBase(cpu);
        cpu.fs(0xFFFF &amp; cpu.physicalMemory.getWord(addr+2));
        $op1.setcpu.physicalMemory.getWord(addr));</snippet>
    <args size="16">Gw;M</args>
  </opcode>

  <opcode mnemonic="lgs_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op2.get + op2.getBase(cpu);
        cpu.gs(0xFFFF &amp; cpu.physicalMemory.getWord(addr+2));
        $op1.setcpu.physicalMemory.getWord(addr));</snippet>
    <args size="16">Gw;M</args>
  </opcode>

  <opcode mnemonic="lss_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op2.get + op2.getBase(cpu);
        cpu.ss(0xFFFF &amp; cpu.physicalMemory.getWord(addr+2));
        $op1.setcpu.physicalMemory.getWord(addr));</snippet>
    <args size="16">Gw;M</args>
  </opcode>
  <opcode mnemonic="lss_o32">
      <return>Branch.None</return>
      <snippet>        int addr = $op2.get + op2.getBase(cpu);
        cpu.ss(0xFFFF &amp; cpu.physicalMemory.getWord(addr+4));
        $op1.setcpu.physicalMemory.getDoubleWord(addr));</snippet>
    <args size="32">Gd;M</args>
  </opcode>

  <opcode mnemonic="lidt_o32">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        int limit = 0xffff &amp; cpu.linearMemory.getWord(addr);
        int base = cpu.linearMemory.getDoubleWord(addr+2);
        cpu.idtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lmsw">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.eip &amp;= 0xFFFF;
        cpu.setCR0((cpu.getCR0() &amp; ~0xf) | ($op1.get &amp; 0xf));</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="lgdt_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        int limit = 0xffff &amp; cpu.linearMemory.getWord(addr);
        int base = 0x00ffffff &amp; cpu.linearMemory.getDoubleWord(addr+2);
        cpu.gdtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lgdt_o32">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        int limit = 0xffff &amp; cpu.linearMemory.getWord(addr);
        int base = cpu.linearMemory.getDoubleWord(addr+2);
        cpu.gdtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lidt_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        int limit = 0xffff &amp; cpu.linearMemory.getWord(addr);
        int base = 0x00ffffff &amp; cpu.linearMemory.getDoubleWord(addr+2);
        cpu.idtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="mov_o16">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="16">Ow;rAX</args>
    <args size="16">rAX;Ow</args>
  </opcode>

  <opcode mnemonic="mov_o32">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="32">Od;rAX</args>
    <args size="32">rAX;Od</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        $op1.set$cast$op2.get);</snippet>
    <args size="32">C;R</args>
  </opcode>

  <opcode mnemonic="mul">
    <return>Branch.None</return>
    <snippet>            cpu.af = false;
        int res16 = ($op1.get &amp; 0xff) * (0xFF &amp; cpu.r_eax.get8());
        cpu.r_eax.set16(res16);
        cpu.cf = cpu.of = (cpu.r_eax.getHigh() != 0);
        cpu.flagResult = (short)res16;
        cpu.flagStatus = SZP;</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="mul">
    <return>Branch.None</return>
    <snippet>            cpu.af = false;
            long res64 = ($mask$op1.get) * ($mask cpu.r_eax.get$size());
            cpu.r_eax.set$size($castres64);
            cpu.r_edx.set$size($cast(res64 >> $size));
            cpu.cf = cpu.of = (cpu.r_edx.get$size() != 0);
            cpu.flagResult = (int)res64;
            cpu.flagStatus = SZP;</snippet>
    <args size="16">Ew</args>
  </opcode>
  <opcode mnemonic="mul">
    <return>Branch.None</return>
    <snippet>            cpu.af = false;
            long res64 = (0xffffffffL &amp; $op1.get) * (0xffffffffL &amp; cpu.r_eax.get$size());
            cpu.r_eax.set$size($castres64);
            cpu.r_edx.set$size($cast(res64 >> $size));
            cpu.cf = cpu.of = (cpu.r_edx.get$size() != 0);
            cpu.flagResult = (int)res64;
            cpu.flagStatus = SZP;</snippet>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="neg">
    <return>Branch.None</return>
    <snippet>            cpu.flagOp1 = $op1.get;
            cpu.flagResult = $cast(-cpu.flagOp1);
            $op1.set$castcpu.flagResult);
            cpu.flagIns = UCodes.NEG$size;
            cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">Eb</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="out">
    <return>Branch.None</return>
    <snippet>        cpu.ioports.ioPortWrite8($mask1$op1.get, $mask2$op2.get);</snippet>
    <args size="8">Ib;AL</args>
    <args size="8">DX;AL</args>
  </opcode>
  <opcode mnemonic="out_o16">
    <return>Branch.None</return>
    <snippet>        cpu.ioports.ioPortWrite16($mask1$op1.get, $mask2$op2.get);</snippet>
    <args size="16">Ib;eAX</args>
    <args size="16">DX;eAX</args>
  </opcode>
  <opcode mnemonic="out_o32">
    <return>Branch.None</return>
    <snippet>        cpu.ioports.ioPortWrite32($mask1$op1.get, $op2.get);</snippet>
    <args size="32">DX;eAX</args>
  </opcode>

  <opcode mnemonic="outsb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.outsb_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsw_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.outsw_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsd_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.outsd_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsb_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>
  <opcode mnemonic="repne_outsb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsb_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsw_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsw_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsd_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsd_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_pop_o16">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.pop$size());</snippet>
    <args size="16">ES</args>
  </opcode>

  <opcode mnemonic="popfw">
    <return>Branch.None</return>
    <snippet>        cpu.setFlags($castcpu.pop16());</snippet>
    <args size="16"></args>
  </opcode>

  <opcode mnemonic="popfd">
    <return>Branch.None</return>
    <snippet>        cpu.setEFlags((cpu.getEFlags() &amp; 0x20000) | (cpu.pop32() &amp; ~0x1a0000));</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushfw">
    <return>Branch.None</return>
    <snippet>        cpu.push16((short)cpu.getEFlags());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushfd">
    <return>Branch.None</return>
    <snippet>        cpu.push32(~0x30000 &amp; cpu.getEFlags());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="salc">
    <return>Branch.None</return>
    <snippet>        cpu.r_al.set8((byte)(cpu.cf() ? 1 : 0));</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="sar">
    <return>Branch.None</return>
    <snippet>        if($op2.get != 0)
        {
            boolean inOF = cpu.of();
            cpu.flagOp1 = $op1.get;
            cpu.flagOp2 = $op2.get;
            cpu.flagResult = $cast(cpu.flagOp1 &gt;&gt; cpu.flagOp2);
            $op1.set$castcpu.flagResult);
            cpu.flagIns = UCodes.SAR$size;
            cpu.flagStatus = OSZAPC;
            if (cpu.flagOp2 == 1)
                cpu.of(false);
            else
                cpu.of(inOF);
        }</snippet>
    <args size="8">Eb;I1</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Eb;CL</args>
    <args size="16">Ew;I1</args>
    <args size="16">Ew;Ib</args>
    <args size="16">Ew;CL</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;CL</args>
  </opcode>

  <opcode mnemonic="seta">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.cf() &amp;&amp; !cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setae">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.cf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setb">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.cf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setbe">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.cf() || cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setne">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="sete">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setg">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((!cpu.zf() &amp;&amp; (cpu.sf() == cpu.of())) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setge">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.sf() == cpu.of()) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setl">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.sf() != cpu.of()) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setle">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.zf() || (cpu.sf() != cpu.of())) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>

  <opcode mnemonic="shld">
    <return>Branch.None</return>
    <snippet>        if($op3.get != 0)
        {
            int shift = $op3.get &amp; 0x1f;
            cpu.flagOp1 = $op1.get;
            cpu.flagOp2 = shift;
            long rot = ((long)($mask$op1.get) &lt;&lt; (2*$size)) | ((0xffffffffL &amp; $mask$op2.get) &lt;&lt; $size) | ($mask$op1.get);
            cpu.flagResult = $cast((int)((rot &lt;&lt; shift) | (rot >>> (2*$size-shift))));
            $op1.set$castcpu.flagResult);
            cpu.flagIns = UCodes.SHLD$size;
            cpu.flagStatus = OSZAPC;
        }</snippet>
    <args size="16">Ew;Gw;Ib</args>
  </opcode>
  <opcode mnemonic="shld">
    <return>Branch.None</return>
    <snippet>        if($op3.get != 0)
        {
            int shift = $op3.get &amp; 0x1f;
            cpu.flagOp1 = $op1.get;
            cpu.flagOp2 = shift;
            long rot = ((0xffffffffL &amp;$op2.get) &lt;&lt; $size) | (0xffffffffL &amp;$op1.get);
            cpu.flagResult = $cast((int)((rot &lt;&lt; shift) | (rot >>> (2*$size-shift))));
            $op1.set$castcpu.flagResult);
            cpu.flagIns = UCodes.SHLD$size;
            cpu.flagStatus = OSZAPC;
        }</snippet>
    <args size="32">Ed;Gd;Ib</args>
  </opcode>

  <opcode mnemonic="shrd">
    <return>Branch.None</return>
    <snippet>        if($op3.get != 0)
        {
            int shift = $op3.get &amp; 0x1f;
            cpu.flagOp1 = $op1.get;
            cpu.flagOp2 = shift;
            long rot = ((long)$op1.get &lt;&lt; (2*$size)) | (($mask$op2.get) &lt;&lt; $size) | ($mask$op1.get);
            cpu.flagResult = $cast((int)(rot >> shift));
            $op1.set$castcpu.flagResult);
            cpu.flagIns = UCodes.SHRD$size;
            cpu.flagStatus = OSZAPC;
        }</snippet>
    <args size="16">Ew;Gw;Ib</args>
    <args size="16">Ew;Gw;CL</args>
  </opcode>
  <opcode mnemonic="shrd">
    <return>Branch.None</return>
    <snippet>        if($op3.get != 0)
        {
            int shift = $op3.get &amp; 0x1f;
            cpu.flagOp1 = $op1.get;
            cpu.flagOp2 = shift;
            long rot = ((0xffffffffL &amp;$op2.get) &lt;&lt; $size) | (0xffffffffL &amp; $op1.get);
            cpu.flagResult = $cast((int)(rot >> shift));
            $op1.set$castcpu.flagResult);
            cpu.flagIns = UCodes.SHRD$size;
            cpu.flagStatus = OSZAPC;
        }</snippet>
    <args size="32">Ed;Gd;Ib</args>
  </opcode>

  <opcode mnemonic="sti">
    <return>Branch.None</return>
    <snippet>        cpu.eflagsInterruptEnableSoon = true;
        cpu.eflagsInterruptEnable = true;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="sgdt_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        cpu.linearMemory.setWord(addr, (short)cpu.gdtr.getLimit());
        cpu.linearMemory.setDoubleWord(addr+2, cpu.gdtr.getBase() &amp; 0x00ffffff);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="sidt_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        cpu.linearMemory.setWord(addr, (short)cpu.idtr.getLimit());
        cpu.linearMemory.setDoubleWord(addr+2, cpu.idtr.getBase() &amp; 0x00ffffff);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="smsw">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(0xFFFF &amp; cpu.getCR0()));</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="wbinvd">
    <return>Branch.None</return>
    <snippet>// write back and invalidate CPU caches</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="xlatb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        cpu.r_al.set8(seg.getByte((0xffff&amp;cpu.r_bx.get16()) + (0xff &amp; cpu.r_al.get8())));</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="xlatb_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        cpu.r_al.set8(seg.getByte(cpu.r_ebx.get32() + (0xff &amp; cpu.r_al.get8())));</snippet>
    <args size="0"></args>
  </opcode>
</opcodesnippets>